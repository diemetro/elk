stages:
  - build_curator
  - deploy


build_curator:
  stage: build_curator
  image: docker:dind
  variables:
    PROJECT_NAME: curator
  before_script:
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
  script:
    - cd ${PROJECT_NAME}
    - docker build --no-cache --pull -t ${CI_REGISTRY_IMAGE}/curator:${CI_PIPELINE_ID} .
    - docker pull ${CI_REGISTRY_IMAGE}/curator:${CI_PIPELINE_ID}
    - docker rmi ${CI_REGISTRY_IMAGE}/curator:${CI_PIPELINE_ID} || true
  tags:
  - runner-docker
  only:
    - main

deploy:
  stage: deploy
  image: docker:dind
  variables:
    SSH_URL: ${DEPLOY_SSH_USER}@${DEPLOY_SSH_HOST}
    SSH_PRIVATE_KEY: ${DEPLOY_PRIVATE_KEY}
    SSH_PORT: ${DEPLOY_SSH_PORT}
    DEPLOY_DIR: /tmp/${CI_COMMIT_SHORT_SHA}/
  before_script:
    - apk add --no-cache git rsync sshpass openssh-client
  script:
    - echo ${SSH_URL}
    - eval $(ssh-agent -s)
    - echo "${SSH_PRIVATE_KEY}" | tr -d '\r' | base64 -d | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - ssh -p ${SSH_PORT} -o stricthostkeychecking=no ${SSH_URL} "mkdir -p ${DEPLOY_DIR}/"
    - scp -P ${SSH_PORT} -r ./ ${SSH_URL}:${DEPLOY_DIR}/
    - ssh -p ${SSH_PORT} -o StrictHostKeyChecking=no -o PubkeyAuthentication=yes ${SSH_URL} DEPLOY_DIR=${DEPLOY_DIR} CI_REGISTRY_USER=${CI_REGISTRY_USER} CI_JOB_TOKEN=${CI_JOB_TOKEN} CI_REGISTRY=${CI_REGISTRY} CI_REGISTRY_IMAGE=${CI_REGISTRY_IMAGE} CI_PIPELINE_ID=${CI_PIPELINE_ID} 'bash -s' < ./deploy.sh
  when: manual
  tags:
  - runner-docker
  only:
    - main